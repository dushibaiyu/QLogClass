#ifndef QLOG_H
#define QLOG_H

#include <QObject>
#include <QTextStream>
#include <QFile>
#include <QCoreApplication>

//QtDebugMsg	0	A message generated by the qDebug() function.
//QtInfoMsg	    4	A message generated by the qInfo() function.
//QtWarningMsg	1	A message generated by the qWarning() function.
//QtCriticalMsg	2	A message generated by the qCritical() function.
//QtFatalMsg	3	A message generated by the qFatal() function.



#define LOG(Level) if (QLOG::QLog::checkLevel(Level)) \
    QLOG::LogMessage(__FILE__, __LINE__,__FUNCTION__,Level).stream()

#define QLogTest LOG(QLOG::TestMsg)
#define QLogDebug LOG(QLOG::DebugMsg)
#define QLogInfo LOG(QLOG::InfoMsg)
#define QLogWarning LOG(QLOG::WarningMsg)
#define QLogCritical LOG(QLOG::CriticalMsg)
#define QLogFatal LOG(QLOG::FatalMsg)


namespace QLOG {

enum LogLevel{
    TestMsg = 0,
    DebugMsg = 1,
    InfoMsg = 2,
    WarningMsg = 3,
    CriticalMsg = 4,
    FatalMsg = 5,
};

class LogMessage
{
public:
    LogMessage(const char * file, int line, const char * funtion, LogLevel level);
    ~LogMessage();
    inline QTextStream & stream() {return ts;}
private:
    QString str_;
    QTextStream ts;
    LogLevel level_;
};

class LogEvent;

class QLog : public QObject
{
    Q_OBJECT
public:
    enum OutState{
        Console = 1,
        File = 2
    };
    ~QLog();
    inline static QLog * initLog(OutState state = Console,LogLevel level = TestMsg) {
        static QLog mlog(state,level);
        log = &mlog;
        return log;
    }

    inline static bool checkLevel(LogLevel level) {
        if (log == nullptr || level < log->level_ ) {
            return false;
        }
        return true;
    }

    inline void setSaveFilePath(const QString & path) {path_ = path;}

    void enbleQtMessage(bool isEnble);
protected:
    void customEvent(QEvent * event);

protected slots:
    void releaseLog();
private:
    OutState state_;
    QFile file_;
    QTextStream ts_;
    LogLevel level_;
    QString path_;
private:
    static QLog * log;
    explicit QLog(OutState state,LogLevel level,QObject *parent = 0);
    friend class LogMessage;
};

} //namespace QLOG

#endif // QLOG_H
